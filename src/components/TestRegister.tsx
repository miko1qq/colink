import { useState } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { authService } from '@/lib/supabaseService';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { User, GraduationCap, UserCheck } from 'lucide-react';

export default function TestRegister() {
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const studentNames = [
    '–ê–π–≥–µ—Ä–∏–º –ù—É—Ä—Ö–∞–Ω–æ–≤–∞', '–ï—Ä–∞—Å—ã–ª –ñ–∞–∫—Å—ã–ª—ã–∫–æ–≤', '–ê—Ä—É–∑han –¢–æ–ª–µ–≥–µ–Ω–æ–≤–∞',
    '–ù—É—Ä—Å—É–ª—Ç–∞–Ω –ë–µ–∫—Ç—É—Ä–æ–≤', '–î–∏–Ω–∞—Ä–∞ –°–∞—Ä—Å–µ–Ω–±–∞–µ–≤–∞', '–ê–ª–∏—Ö–∞–Ω –ö—É–¥–∞–π–±–µ—Ä–≥–µ–Ω–æ–≤',
    '–ú–∞–¥–∏–Ω–∞ –ê–±–µ–Ω–æ–≤–∞', '–î–∏–∞—Å –¢—É—Ä—Å—ã–Ω–±–µ–∫–æ–≤', '–ó–µ—Ä–µ –ê–π—Ç—Ö–æ–∂–∞', '–¢–∏–º—É—Ä –ê—Å—ã–ª—Ö–∞–Ω–æ–≤',
    '–ê–º–∏–Ω–∞ –ö–∞—Å—ã–º–æ–≤–∞', '–î–∞–Ω–∏—è—Ä –û—Å–ø–∞–Ω–æ–≤', '–ö–∞–º–∏–ª–∞ –ñ—É–Ω—É—Å–æ–≤–∞', '–ë–µ–∫–∑–∞—Ç –ú—É—Ö–∞–º–µ–¥–æ–≤'
  ];

  const professorNames = [
    '–ê–ª–∏–¥–∞—Ä –ö–æ—è–Ω–±–∞–µ–≤', '–ì—É–ª—å–Ω–∞—Ä–∞ –°–µ–π—Ç–æ–≤–∞', '–ú–∞—Ä–∞—Ç –ñ—É–º–∞–±–∞–µ–≤',
    '–ê–π–∂–∞–Ω –¢–µ–º–∏—Ä–æ–≤–∞', '–ï—Ä–ª–∞–Ω –ù–∞–∑–∞—Ä–±–∞–µ–≤', '–°–∞—É–ª–µ –ö–∞—Å—ã–º–±–µ–∫–æ–≤–∞'
  ];

  const domains = ['coventry.edu.kz', 'student.coventry.edu.kz'];

  const generateRandomUser = (role: 'student' | 'professor') => {
    const names = role === 'student' ? studentNames : professorNames;
    const randomName = names[Math.floor(Math.random() * names.length)];
    const nameTranslit = randomName
      .toLowerCase()
      .replace(/[^a-z\s]/g, '')
      .replace(/\s+/g, '.')
      .replace(/–∞/g, 'a').replace(/–±/g, 'b').replace(/–≤/g, 'v')
      .replace(/–≥/g, 'g').replace(/–¥/g, 'd').replace(/–µ/g, 'e')
      .replace(/–∂/g, 'zh').replace(/–∑/g, 'z').replace(/–∏/g, 'i')
      .replace(/–π/g, 'y').replace(/–∫/g, 'k').replace(/–ª/g, 'l')
      .replace(/–º/g, 'm').replace(/–Ω/g, 'n').replace(/–æ/g, 'o')
      .replace(/–ø/g, 'p').replace(/—Ä/g, 'r').replace(/—Å/g, 's')
      .replace(/—Ç/g, 't').replace(/—É/g, 'u').replace(/—Ñ/g, 'f')
      .replace(/—Ö/g, 'h').replace(/—Ü/g, 'ts').replace(/—á/g, 'ch')
      .replace(/—à/g, 'sh').replace(/—â/g, 'sch').replace(/—ã/g, 'y')
      .replace(/—ç/g, 'e').replace(/—é/g, 'yu').replace(/—è/g, 'ya');
    
    const domain = domains[Math.floor(Math.random() * domains.length)];
    const randomNum = Math.floor(Math.random() * 100);
    
    return {
      name: randomName,
      email: `${nameTranslit}${randomNum}@${domain}`,
      password: 'testpass123'
    };
  };

  const handleRegister = async (role: 'student' | 'professor') => {
    setLoading(true);
    setMessage('');

    try {
      const userData = generateRandomUser(role);
      
      const { data, error } = await authService.signUp(
        userData.email,
        userData.password,
        role,
        userData.name
      );

      if (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      } else {
        setMessage(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!
        üìß Email: ${userData.email}
        üîí Password: ${userData.password}
        üë§ Role: ${role}
        üìù Name: ${userData.name}`);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', data);
      }
    } catch (error) {
      setMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
      console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleQuickLogin = async () => {
    setLoading(true);
    setMessage('');

    try {
      // –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const { data, error } = await authService.signIn(
        'student@example.com',
        'testpass123'
      );

      if (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
      } else {
        setMessage(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.location.reload();
      }
    } catch (error) {
      setMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const createTestStudent = async () => {
    setLoading(true);
    setMessage('');

    try {
      const { data, error } = await authService.signUp(
        'student@example.com',
        'testpass123',
        'student',
        '–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç'
      );

      if (error) {
        setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: ${error.message}`);
      } else {
        setMessage(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!
        üìß Email: student@example.com
        üîí Password: testpass123`);
      }
    } catch (error) {
      setMessage(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto mt-8">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <UserCheck className="h-5 w-5 text-primary" />
          –¢–µ—Å—Ç–æ–≤–∞—è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Button
            onClick={createTestStudent}
            disabled={loading}
            variant="outline"
            className="flex items-center gap-2"
          >
            <User className="h-4 w-4" />
            –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
          </Button>

          <Button
            onClick={handleQuickLogin}
            disabled={loading}
            variant="default"
            className="flex items-center gap-2"
          >
            <UserCheck className="h-4 w-4" />
            –í–æ–π—Ç–∏ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç
          </Button>

          <Button
            onClick={() => handleRegister('professor')}
            disabled={loading}
            variant="secondary"
            className="flex items-center gap-2"
          >
            <GraduationCap className="h-4 w-4" />
            –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞
          </Button>
        </div>

        {/* –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è */}
        <div className="border-t pt-4">
          <h3 className="font-semibold mb-3 flex items-center gap-2">
            üé≤ –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Button
              onClick={() => handleRegister('student')}
              disabled={loading}
              variant="outline"
              className="flex items-center gap-2"
            >
              <User className="h-4 w-4" />
              –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç
            </Button>

            <Button
              onClick={() => handleRegister('professor')}
              disabled={loading}
              variant="outline"
              className="flex items-center gap-2"
            >
              <GraduationCap className="h-4 w-4" />
              –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä
            </Button>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ */}
        {message && (
          <div className="p-4 bg-muted rounded-lg border">
            <pre className="text-sm whitespace-pre-wrap font-mono">
              {message}
            </pre>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="border-t pt-4 space-y-2">
          <h3 className="font-semibold">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
          <div className="text-sm text-muted-foreground space-y-1">
            <p>‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏: <code className="bg-muted px-1 rounded">testpass123</code></p>
            <p>‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: <code className="bg-muted px-1 rounded">student@example.com</code></p>
            <p>‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏</p>
            <p>‚Ä¢ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)</p>
          </div>
          
          <div className="flex gap-2 mt-3">
            <Badge variant="outline">Development Only</Badge>
            <Badge variant="secondary">Demo Purposes</Badge>
          </div>
        </div>

        {loading && (
          <div className="flex items-center justify-center p-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
            <span className="ml-2 text-sm text-muted-foreground">–û–±—Ä–∞–±–æ—Ç–∫–∞...</span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}